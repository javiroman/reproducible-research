If you do not have the ability to manipulate DNS in your environment, or just 
want a quick and dirty way to set up DNS, you can install dnsmasq on one of 
your nodes. Do not install DNSMasq on your master. OpenShift now has an 
internal DNS service provided by Go's "SkyDNS" that is used for internal 
service communication.

yum -y install dnsmasq

Replace /etc/dnsmasq.conf with the one from this repository, and replace 
/etc/hosts with the hosts file from this repository.

Copy your current /etc/resolv.conf to a new file such as /etc/resolv.conf.upstream. 
Ensure you only have an upstream resolver there (eg: Google DNS  8.8.8.8), not the 
address of your dnsmasq server.

Enable and start the dnsmasq service:

systemctl enable dnsmasq; systemctl start dnsmasq

You will need to ensure the following, or fix the following:

- Your IP addresses match the entries in /etc/hosts
- Your hostnames for your machines match the entries in /etc/hosts
- Your cloudapps domain points to the correct node ip in dnsmasq.conf
- Each of your systems has the same /etc/hosts file
- Your master and nodes /etc/resolv.conf points to the IP address of the node running DNSMasq as the first nameserver
- Your dnsmasq instance uses the resolv-file option to point to /etc/resolv.conf.upstream only.
- That you also open port 53 (TCP and UDP) to allow DNS queries to hit the node
- Following this setup for dnsmasq will ensure that your wildcard domain works, that your hosts in the example.com 
domain resolve, that any other DNS requests resolve via your configured local/remote nameservers, and that DNS 
resolution works inside of all of your containers. Don't forget to start and enable the dnsmasq service.

Note:

- The node with this dnsmasq have to open the DNS port:
Make sure port 53/udp is open on the dnsmasq node. We have to use iptables rules for this, 
even if you have firewalld installed. Otherwise, the openshift-ansible playbook will 
disable and mask it and we will lose those rules. If you do have firewalld, let's 
mask it and replace it with iptables-services:

# systemctl stop firewalld
# systemctl disable firewalld
# systemctl mask firewalld
# yum install -y iptables-services
# systemctl enable iptables
# systemctl start iptables

Install the DNS iptables rules

# iptables -I INPUT 1 -p TCP --dport 53 -j ACCEPT
# iptables -I INPUT 1 -p UDP --dport 53 -j ACCEPT
# iptables-save > /etc/sysconfig/iptables

Restart the iptables service and make sure that the rules are still there afterwards.

Verifying DNSMasq
~~~~~~~~~~~~~~~~~

You can query the local DNS on the master using dig (provided by the bind-utils package) to make sure it returns the correct records:

dig ose3-master.example.com

...
;; ANSWER SECTION:
ose3-master.example.com. 0  IN  A 192.168.133.2
...
The returned IP should be the public interface's IP on the master. Repeat for your nodes. To verify the wildcard entry, simply dig an arbitrary domain in the wildcard space:

dig foo.cloudapps.example.com

...
;; ANSWER SECTION:
foo.cloudapps.example.com 0 IN A 192.168.133.2



