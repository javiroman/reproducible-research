" Licensed to the Apache Software Foundation (ASF) under one
" or more contributor license agreements.  See the NOTICE file
" distributed with this work for additional information
" regarding copyright ownership.  The ASF licenses this file
" to you under the Apache License, Version 2.0 (the License"); 
" you may not use this file except in compliance
" with the License.  You may obtain a copy of the License at
"
" http://www.apache.org/licenses/LICENSE-2.0
"
" Unless required by applicable law or agreed to in writing,
" software distributed under the License is distributed on an
" AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
" KIND, either express or implied.  See the License for the
" specific language governing permissions and limitations
" under the License.

" -----------------------------------------------------------------------------
" Disable plugins:
" $ vim -u NONE
"
" Edit .vimrc from vim:
" :e $MYVIMRC
" -----------------------------------------------------------------------------

" Vim environment installation instructions:
"
" Vimrc file based on the plug-in manager
" https://github.com/VundleVim/Vundle.vim
"
" Vundle Setup:
" mkdir -p .vim/bundle
" git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
" :PluginInstall or from command line: vim +PluginInstall +qall

" ##############################################################################
"                           START Plugin install section            
" ##############################################################################

" When Vim starts, the 'compatible' option is on. This will be used when Vim
" starts its initializations. But as soon as a user vimrc file is found, or a
" vimrc file in the current directory, or the "VIMINIT" environment variable is
" set, it will be set to 'nocompatible'.
set nocompatible

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" -----------------------------------------------------------------------------
" NERDTree Plugin: (Folder explorer)
" github.com/scrooloose/nerdtree.git
" -----------------------------------------------------------------------------
Plugin 'scrooloose/nerdtree.git'

" -----------------------------------------------------------------------------
" TagList Plugin: (Code logic navigator)
" github.com/vim-scripts/taglist.vim
" -----------------------------------------------------------------------------
Plugin 'vim-scripts/taglist.vim'

" -----------------------------------------------------------------------------
" Tagbar Plugin: (A class outline viewer for Vim)
" github.com/majutsushi/tagbar.git
" -----------------------------------------------------------------------------
Plugin 'majutsushi/tagbar.git'

" -----------------------------------------------------------------------------
" BuffExporer Plugin: (Easier buffer explorer)
" github.com/jlanzarotta/bufexplorer.git
" -----------------------------------------------------------------------------
Plugin 'jlanzarotta/bufexplorer.git'

" -----------------------------------------------------------------------------
" ControlP Plugin: (Another folder explorer and search tool)
" github.com/kien/ctrlp.vim
" -----------------------------------------------------------------------------
Plugin 'ctrlpvim/ctrlp.vim.git'

" -----------------------------------------------------------------------------
" AirLine: lean & mean status/tabline for vim 
" github.com/vim-airline/vim-airline.git
" -----------------------------------------------------------------------------
Plugin 'vim-airline/vim-airline.git'

" -----------------------------------------------------------------------------
" Vim Go Plugin: For Go lang programming
" github.com/fatih/vim-go.git
" -----------------------------------------------------------------------------
Plugin 'fatih/vim-go.git'

" -----------------------------------------------------------------------------
" Colorschemes Plugin:
" github.com/flazz/vim-colorschemes.git
" -----------------------------------------------------------------------------
Plugin 'flazz/vim-colorschemes.git'

" -----------------------------------------------------------------------------
" Precision Solarized Colorscheme Plugin:
" http://ethanschoonover.com/solarized
Plugin 'altercation/vim-colors-solarized.git'
" -----------------------------------------------------------------------------

" -----------------------------------------------------------------------------
" The Ultimate Snippet Solution Plugin:
" Powered Code Snippets.
" Howto: https://www.youtube.com/watch?v=WeppptWfV-0&t=131s 
" -----------------------------------------------------------------------------
Plugin 'SirVer/ultisnips.git'

" -----------------------------------------------------------------------------
" Vim Snipmate Default Snippets:
" vim-snipmate default snippets (Previously snipmate-snippets)
" -----------------------------------------------------------------------------
Plugin 'honza/vim-snippets.git'

" -----------------------------------------------------------------------------
" Some Utility Functions Plugin:
" -----------------------------------------------------------------------------
Plugin 'tomtom/tlib_vim.git'

" -----------------------------------------------------------------------------
" AutoPairs Plugin: (Auto coloms, brackers, ..)
" github.com/jiangmiao/auto-pairs.git
" -----------------------------------------------------------------------------
Plugin 'jiangmiao/auto-pairs.git'

" -----------------------------------------------------------------------------
" Enhaced Commentify Plugin: (Easy code block comment)
" github.com/vim-scripts/EnhCommentify.vim.git
" -----------------------------------------------------------------------------
Plugin 'vim-scripts/EnhCommentify.vim.git'

" -----------------------------------------------------------------------------
" SuperTAB Plugin: (autocomplete engine)
" github.com/ervandew/supertab.git
" -----------------------------------------------------------------------------
Plugin 'ervandew/supertab.git'

" -----------------------------------------------------------------------------
" Fugitive Plugin: (Git functions)
" github.com/tpope/vim-fugitive.git
" -----------------------------------------------------------------------------
Plugin 'tpope/vim-fugitive.git'

" -----------------------------------------------------------------------------
" Gitgutter Plugin:
" -----------------------------------------------------------------------------
Plugin 'airblade/vim-gitgutter'

" -----------------------------------------------------------------------------
" IndentLine Plugin: (Visual horizontal code indentation)
" github.com/Yggdroot/indentLine.git
" -----------------------------------------------------------------------------
Plugin 'Yggdroot/indentLine.git'

" -----------------------------------------------------------------------------
" Ansible Playbooks Syntax Plugin:
" github.com/pearofducks/ansible-vim
" -----------------------------------------------------------------------------
Plugin 'pearofducks/ansible-vim'

" -----------------------------------------------------------------------------
" JSON Managing Plugin:
" github.com/elzr/vim-json
" -----------------------------------------------------------------------------
Plugin 'elzr/vim-json'

" -----------------------------------------------------------------------------
" Python Mode Plugin: (Python IDE tools)
" github.com/klen/python-mode.git
" -----------------------------------------------------------------------------
Plugin 'klen/python-mode.git'

" -----------------------------------------------------------------------------
" Erlang IDE Plugins:
" http://vim-erlang.github.io/
" -----------------------------------------------------------------------------
Plugin 'vim-erlang/vim-erlang-runtime.git'
Plugin 'vim-erlang/vim-erlang-compiler.git'
Plugin 'vim-erlang/vim-erlang-omnicomplete.git'
Plugin 'vim-erlang/vim-erlang-tags.git'
Plugin 'melekes/vim-erlang-spec.git'
Plugin 'huffman/vim-erlang-templates.git'

" -----------------------------------------------------------------------------
" Clang Format Plugin: (C and C++)
" Plugin for clang-format, a formatter for C, C++, 
" Obj-C, Java, JavaScript, TypeScript and ProtoBuf.
" This vim-clang-format has below advantages regarding the classical
" clang-format.py bundled in clang-format distribution:
" Style options are highly customizable in .vimrc. clang-format.py requires
" - .clang-format file to customize a style.
" - vim-clang-format provides an operator mapping.
" - vim-clang-format doesn't need python interface.
" -----------------------------------------------------------------------------
Plugin 'rhysd/vim-clang-format.git'

" -----------------------------------------------------------------------------
" Java Complete2 Plugin: 
" https://vimawesome.com/plugin/vim-javacomplete2
" -----------------------------------------------------------------------------
Plugin 'artur-shaik/vim-javacomplete2'

" -----------------------------------------------------------------------------
" YouCompleteMe Plugin:
" https://github.com/ycm-core/YouCompleteMe
" -----------------------------------------------------------------------------
Plugin 'ycm-core/YouCompleteMe'

" -----------------------------------------------------------------------------
" For JAVA Debuggin Plugin:
" HowTo:
" 1. start JAVA process with the following debug agent option in one terminal, 
"    e.g.:  java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 MyClass
" 2. attach to the JAVA process from your VIM with VIM-JDB like
"    :JDBAttach or by explicitly specifying host and port :JDBAttach localhost:5005
" 3. now the JDB shell buffer should open and signal that it connected to the 
"    JAVA process
" 4. open a JAVA file and go to the line in it where you want to set a breakpoint
"    set a breakpoint on the current line in the current file by using the command
"    :JDBBreakpointOnLine
" 5. breakpoints are marked depending on your terminals and VIMs capabilities 
"    with a ⛔ or x
" 6. if your programm stops at the breakpoint this is marked with a ->
" 7. use the command :JDBStepOver to execute to the next line
" 8. with :JDBCommand you can send any JDB command to the JDB JAVA process, e.g. 
"    you want to see all locals do :JDBCommands locals
" 9. with :JDBContinue you can resume the execution until the next breakpoint 
"    is hits
" -----------------------------------------------------------------------------
Plugin 'Dica-Developer/vim-jdb'


" All of your Plugins must be added before the following line
call vundle#end()
filetype plugin indent on

" ##############################################################################
"                           END Plugin install section            
" ##############################################################################

" -----------------------------------------------------------------------------
" General Settings
" -----------------------------------------------------------------------------
" Insert space characters whenever the tab key is pressed
set expandtab

" Affects how <TAB> key presses are interpreted depending on 
" where the cursor is. If 'smarttab' is on, a <TAB> key inserts
" indentation according to 'shiftwidth' at the beginning of the
" line, whereas 'tabstop' and 'softtabstop' are used elsewhere.
set smarttab

" Number of spaces to use for each step of (auto)indent.  Used for
" 'cindent', >>, <<
set shiftwidth=4

" Control how many columns vim uses when you hit Tab in insert mode.
set softtabstop=4

" how many columns a tab counts for. Linux kernel code expects each tab to be
" eight columns wide. 
set tabstop=4

" That will automatically wrap text as close to 79 characters as white space
" allows without exceeding the 79 character limit. This option wraps at word
" boundaries.
set textwidth=79

" indent for YAML files
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

" Color Schemes
" Default light solarized theme
if has("gui_running")
    setlocal background=light
    colorscheme solarized
else
    " Similar to wombat less contrast
    "colorscheme elflord
    
    " Prefered Colarized 
    let g:solarized_termcolors=256
    setlocal background=light
    colorscheme solarized
endif

" Show line numbers by default
set nu

" -----------------------------------------------------------------------------
" Custom key bindings
" -----------------------------------------------------------------------------

" Change leader key
let mapleader=","

" Standard buffer navigation key bindings:
nnoremap <silent> <TAB> :bn<CR>
nnoremap <silent> <S-TAB> <C-w>w

" BuffExporer Plugin key bindings:
" Leaer key + g -> show buffer navigation window
nnoremap <silent> <leader>g :BufExplorer<CR>

" TagList Plugin key bindings:
" Leaer key + t -> open/close Tlist tree
nnoremap <silent> <leader>t :TlistToggle<CR>

" Tagbar Plugin key bindings:
" Leaer key + y -> open/close TagBar tree
nnoremap <silent> <leader>y :TagbarToggle<CR>

" NERDTree Plugin key bindings:
" Leader key + n -> open/close folder explorer
nnoremap <silent> <leader>n :NERDTreeToggle<CR>

" ControlP Plugin key bindings:
" Leader key + p -> open search window (default key binding)

" -----------------------------------------------------------------------------
" Custom general settings
" -----------------------------------------------------------------------------

" higlight the line where the cursor is
set cursorline 

" higlight the the column in 80 characters only one character
highlight ColorColumn ctermbg=magenta 
call matchadd('ColorColumn', '\%81v', 100) 

" clang-format for C++ bindings
" Supported style formats: llvm, google, chromium, mozilla is supported. 
" The default value is google style.
let g:clang_format#style_options = {
        \ "Standard" : "C++11"}
let g:clang_format#detect_style_file = 1

" -----------------------------------------------------------------------------
" NERDTree Plugin Settings:
" The NERD tree allows you to explore your filesystem and to open files and
" directories. It presents the filesystem to you in the form of a tree which
" you manipulate with the keyboard and/or mouse. It also allows you to perform
" simple filesystem operations.
" -----------------------------------------------------------------------------
" Avoid listing of files like .pyc
let NERDTreeIgnore = ['\.pyc$']

" Default window size is 31
let g:NERDTreeWinSize = 31

" Close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" -----------------------------------------------------------------------------
" Python Mode General Settings:
"
" Python-mode is a vim plugin that helps you to create python code very quickly
" by utilizing libraries including pylint, rope, pydoc, pyflakes, pep8,
" autopep8, pep257 and mccabe for features like static analysis, refactoring,
" folding, completion, documentation, and more.
"
" The plugin contains all you need to develop python applications in Vim.
" -----------------------------------------------------------------------------
" General help:
" 1. Documentation: 
" "K" in key word show help
" "control-w w" cambia de buffer ciclicamente
" "control-w j" cambia a buffer abajo
" "control-w k" cambia a buffer arriba
" "control-w c" cierra el buffer
" "Number control-w <" decrement the panel to left Number times.
" "control-w <" increment the panel to right
" "control-w +" increment the panel to up
" "control-w -" increment the panel to up
" 2. Run the code:
" "<leaderkey> r" the leader key and r runs the code
" 3. Autocomplete:
" "control space (in inserting mode)"
" 4. Commnen/uncomment blocks:
" "visual mode" ,c
" Folders python-mode help:
"
" zf#j creates a fold from the cursor down # lines.
" zf/string creates a fold from the cursor to string .
" zj moves the cursor to the next fold.
" zk moves the cursor to the previous fold.
" zo opens a fold at the cursor.
" zO opens all folds at the cursor.
" zc close a fold at the cursor.
" zm increases the foldlevel by one.
" zr decreases the foldlevel by one.
" zM CLOSES all open folds.
" zR OPEN all folds in the buffer.
" zd deletes the fold at the cursor.
" zE deletes all folds.
" [z move to start of open fold.
" ]z move to end of open fold.

" Disable python-mode folders
"let g:pymode_folding = 0

" For disabling syntax checkers
" let g:pymode_lint = 0

" Disable python-mode colorcolum and set own.
let g:pymode_options_colorcolumn = 0

" Disable python-mode Rope code completion, we use super tab.
let g:pymode_rope = 0

" -----------------------------------------------------------------------------
" SnipMate forked
" -----------------------------------------------------------------------------
" http://stackoverflow.com/questions/6916250/can-we-use-multiple-snippet-files-for-given-filetype-in-vim
" Available snippets: .vim/bundle/vim-snippets/snippets
" Usage: <intert mode> cl <tab> 
" Usage: https://github.com/honza/vim-snippets

" Change <tab> by <Enter> for code insertion to avoid conflicts with other tabs
" actions and other plugins.
let g:UltiSnipsExpandTrigger='<Enter>'

" -----------------------------------------------------------------------------
" Fugitive plugin:
"
" Plugin that empowers you to manage many git commands from Vim.
" -----------------------------------------------------------------------------

" -----------------------------------------------------------------------------
" BuffExporer Plugin:
"
" Once the bufexplorer window is open you can use the normal movement keys
" (hjkl) to move around and then use or to select the buffer you would like to
" open. If you would like to have the selected buffer opened in a new tab,
" simply press either or 't'. 
"
" Note about VIM Tabs:
" 
" :tabs         list all tabs including their displayed windows
" :tabm 0       move current tab to first
" :tabm         move current tab to last
" :tabn         go to next tab
" :tabp         go to previous tab
" :tabfirst     go to first tab
" :tablast      go to last tab
"
" In normal mode:
"
" gt            go to next tab
" gT            go to previous tab
" {i}gt         go to tab in position i
"
" More here:
"
" http://vim.wikia.com/wiki/Using_tab_pages
" -----------------------------------------------------------------------------
" To start exploring in the current window, use:
"  <Leader>be  or :BufExplorer
" To toggle bufexplorer on or off in the current window, use:
"  <Leader>bt  or :ToggleBufExplorer
" To start exploring in a newly split horizontal window, use:
"  <Leader>bs  or :BufExplorerHorizontalSplit
" To start exploring in a newly split vertical window, use:
" <Leader>bv   or :BufExplorerVerticalSplit

" -----------------------------------------------------------------------------
" Commentify Notes
" -----------------------------------------------------------------------------
" ESC v (visualmode selection) of lines to comment and then: <m-x>

" -----------------------------------------------------------------------------
" IdentLine
" -----------------------------------------------------------------------------
" Note: display thin vertical lines at each indentation level for code

" vertical line indentation for SPACES
let g:indentLine_color_term = 239
let g:indentLine_color_gui = '#09AA08'
let g:indentLine_char = '│'
let g:indentLine_noConcealCursor="nc"

" vertical line indentation for TAB
set list lcs=tab:\|\ 

" -----------------------------------------------------------------------------
" ControlP
" -----------------------------------------------------------------------------
" Use <leader>t to open ctrlp
let g:ctrlp_map = '<leader>p'
" Ignore these directories
set wildignore+=*/build/**
" disable caching
let g:ctrlp_use_caching=0

" -----------------------------------------------------------------------------
" Airline enablement
" -----------------------------------------------------------------------------
set laststatus=2

" -----------------------------------------------------------------------------
" Vim-Go: 
" Tutorial: https://github.com/fatih/vim-go-tutorial
" HowTo: http://www.ascent.io/blog/2014/03/11/gvm-with-golang/
" :GoErrCheck --> Check compiler errors
" :GoImport fmt --> insert fmt import properly
" -----------------------------------------------------------------------------
" By default when :GoInstallBinaries is called, 
" the binaries are installed to $GOBIN or $GOPATH/bin. 
" To change it:

" let g:go_bin_path = expand("~/.gotools")
" Ready for working with GVM tool
" let g:go_bin_path = expand("$GOROOT/bin")

let g:go_fmt_command = "goimports"
let g:syntastic_check_on_wq = 1
let g:go_metalinter_autosave = 1
let g:go_metalinter_autosave_enabled = ['golint', 'errcheck']

" For avoiding only one of the checkers is working after adding the
" syntastic_go_checkers line
let g:syntastic_aggregate_errors = 1
let g:syntastic_go_checkers = ['errcheck', 'go', 'golint', 'govet']

" -----------------------------------------------------------------------------
" Better JSON for Vim
" -----------------------------------------------------------------------------
" Most trouble, little as it is, has to do with Vim's newfangled concealing,
" which most people aren't yet familiar with, as it was introduced as recently
" as Vim 7.3+.
" If you just don't care for concealing you can easily disable it adding 
" let g:vim_json_syntax_conceal = 0

" -----------------------------------------------------------------------------
" Erlang IDE
" -----------------------------------------------------------------------------
" Notes:
" Control X Control O -> autocompletion for Erlangs

"------------------------------------------------------------------------------
" Autoload tags
"------------------------------------------------------------------------------
autocmd BufWritePost *
      \ if filereadable('tags') |
      \   call system('ctags -a '.expand('%')) |
      \ endif

" -----------------------------------------------------------------------------
" Misc
" -----------------------------------------------------------------------------
" cool colors
set t_Co=256

" -----------------------------------------------------------------------------
" Java Plugin Settings:
" -----------------------------------------------------------------------------
autocmd FileType java setlocal omnifunc=javacomplete#Complete
" To enable smart (trying to guess import option) inserting class imports with F4, add:
nmap <F4> <Plug>(JavaComplete-Imports-AddSmart)
imap <F4> <Plug>(JavaComplete-Imports-AddSmart)
" To enable usual (will ask for import option) inserting class imports with F5, add:
nmap <F5> <Plug>(JavaComplete-Imports-Add)
imap <F5> <Plug>(JavaComplete-Imports-Add)
" To add all missing imports with F6:
nmap <F6> <Plug>(JavaComplete-Imports-AddMissing)
imap <F6> <Plug>(JavaComplete-Imports-AddMissing)
" To remove all unused imports with F7:
nmap <F7> <Plug>(JavaComplete-Imports-RemoveUnused)
imap <F7> <Plug>(JavaComplete-Imports-RemoveUnused)

