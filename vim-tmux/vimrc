" -----------------------------------------------------------------------------
" vim -u NONE
"
" Vimscript:
" http://learnvimscriptthehardway.stevelosh.com/
"
" Vim Colours:
" http://www.gilesorr.com/blog/vim-colours.html
"
" -----------------------------------------------------------------------------
"
" Vimrc file based on the plug-in manager
" https://github.com/VundleVim/Vundle.vim
"
" Vundle Setup:
" mkdir -p .vim/bundle
" git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
" :PluginInstall or from command line: vim +PluginInstall +qall

" -----------------------------------------------------------------------------
" Plug-ins installation
" -----------------------------------------------------------------------------
set nocompatible
filetype off   

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" [Plug-in handling ... BEGIN]

" NERDTree plugin: (Folder explorer)
" github.com/scrooloose/nerdtree.git
" dnf install ctags cscope
Plugin 'scrooloose/nerdtree.git'

" TagList plugin: (Code logic navigator)
" github.com/vim-scripts/taglist.vim
Plugin 'vim-scripts/taglist.vim'

" Tagbar plugin: (A class outline viewer for Vim)
" github.com/majutsushi/tagbar.git
Plugin 'majutsushi/tagbar.git'

" AutoPairs plugin: (Auto coloms, brackers, ..)
" github.com/jiangmiao/auto-pairs.git
Plugin 'jiangmiao/auto-pairs.git'

" Python-Mode plugin: (Python IDE tools)
" github.com/klen/python-mode.git
Plugin 'klen/python-mode.git'

" Enhaced Commentify plugin: (Easy code block comment)
" github.com/vim-scripts/EnhCommentify.vim.git
Plugin 'vim-scripts/EnhCommentify.vim.git'

" SuperTAB plugin: (autocomplete engine)
" github.com/ervandew/supertab.git
Plugin 'ervandew/supertab.git'

" SnipMate forked plugin: (Code snippets insert)
" github.com/tomtom/tlib_vim.git
" github.com/MarcWeber/vim-addon-mw-utils.git
" github.com/garbas/vim-snipmate.git
" github.com/honza/vim-snippets.git
Plugin 'tomtom/tlib_vim.git'

" BuffExporer plugin: (Easier buffer explorer)
" github.com/jlanzarotta/bufexplorer.git
Plugin 'jlanzarotta/bufexplorer.git'

" Fugitive plugin: (Git functions)
" github.com/tpope/vim-fugitive.git
Plugin 'tpope/vim-fugitive.git'

" IndentLine: (Visual horizontal code indentation)
" github.com/Yggdroot/indentLine.git
Plugin 'Yggdroot/indentLine.git'

" ControlP: (Another folder explorer and search tool)
" github.com/kien/ctrlp.vim
Plugin 'kien/ctrlp.vim'

" AirLine: lean & mean status/tabline for vim 
" github.com/vim-airline/vim-airline.git
Plugin 'vim-airline/vim-airline.git'

" Vim-Go: For Go lang programming
" github.com/fatih/vim-go.git
Plugin 'fatih/vim-go.git'

" Vim colorschemes
" github.com/flazz/vim-colorschemes.git
Plugin 'flazz/vim-colorschemes.git'

" Vim syntax for Ansible playbooks:
" github.com/pearofducks/ansible-vim
Plugin 'pearofducks/ansible-vim'

" All of your Plugins must be added before the following line
call vundle#end()
filetype plugin indent on

" [Plug-in handling ... END]

" -----------------------------------------------------------------------------
" General Settings
" -----------------------------------------------------------------------------
" Insert space characters whenever the tab key is pressed
set expandtab

" Affects how <TAB> key presses are interpreted depending on 
" where the cursor is. If 'smarttab' is on, a <TAB> key inserts
" indentation according to 'shiftwidth' at the beginning of the
" line, whereas 'tabstop' and 'softtabstop' are used elsewhere.
set smarttab

" Number of spaces to use for each step of (auto)indent.  Used for
" 'cindent', >>, <<
set shiftwidth=4

" Control how many columns vim uses when you hit Tab in insert mode.
set softtabstop=4

" how many columns a tab counts for. Linux kernel code expects each tab to be
" eight columns wide. 
set tabstop=4

" That will automatically wrap text as close to 79 characters as white space
" allows without exceeding the 79 character limit. This option wraps at word
" boundaries.
set textwidth=79

" indent for YAML files
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

" Color Schemes
if has("gui_running")
	setlocal background=dark
else
	" Gray pretty clear
	"colorscheme murphy
	
	" Comments in high contrast
	"colorscheme wombat
	
	" Keywords pink purpe
	"colorscheme molokai
	
	" Similar to wombat less contrast
	"colorscheme elflord
	
	" Comments in grey 
	colorscheme jelleybeans
endif

" Change leader key
let mapleader=","

" buffer navigation
nnoremap <silent> <TAB> :bn<CR>
nnoremap <silent> <S-TAB> <C-w>w
nnoremap <silent> <leader>b :BufExplorer<CR>

" Leaer key + t -> open/close Tlist tree
nnoremap <silent> <leader>t :TlistToggle<CR>

" Leaer key + y -> open/close TagBar tree
nnoremap <silent> <leader>y :TagbarToggle<CR>

" Leader key + n -> open/close folder explorer
nnoremap <silent> <leader>n :NERDTreeToggle<CR>

" higlight the line where the cursor is
set cursorline 

" higlight the the column in 80 characters only one character
highlight ColorColumn ctermbg=magenta 
call matchadd('ColorColumn', '\%81v', 100) 

" -----------------------------------------------------------------------------
"  NERDTree settings
" -----------------------------------------------------------------------------
" Avoid listing of files like .pyc
let NERDTreeIgnore = ['\.pyc$']

" -----------------------------------------------------------------------------
" Python Mode General Settings
" -----------------------------------------------------------------------------
" General help:
" 1. Documentation: 
" 	"K" in key word show help
" 	"control-w w" cambia de buffer ciclicamente
" 	"control-w j" cambia a buffer abajo
" 	"control-w k" cambia a buffer arriba
" 	"control-w c" cierra el buffer
" 	"Number control-w <" decrement the panel to left Number times.
" 	"control-w <" increment the panel to right
" 	"control-w +" increment the panel to up
" 	"control-w -" increment the panel to up
" 2. Run the code:
" 	"<leaderkey> r" the leader key and r runs the code
" 3. Autocomplete:
" 	"control space (in inserting mode)"
" 4. Commnen/uncomment blocks:
" 	"visual mode" ,c
" Folders python-mode help:
"
" zf#j creates a fold from the cursor down # lines.
" zf/string creates a fold from the cursor to string .
" zj moves the cursor to the next fold.
" zk moves the cursor to the previous fold.
" zo opens a fold at the cursor.
" zO opens all folds at the cursor.
" zc close a fold at the cursor.
" zm increases the foldlevel by one.
" zr decreases the foldlevel by one.
" zM CLOSES all open folds.
" zR OPEN all folds in the buffer.
" zd deletes the fold at the cursor.
" zE deletes all folds.
" [z move to start of open fold.
" ]z move to end of open fold.

" Disable python-mode folders
"let g:pymode_folding = 0

" Disable python-mode colorcolum and set own.
let g:pymode_options_colorcolumn = 0

" Disable python-mode Rope code completion, we use super tab.
let g:pymode_rope = 0

" -----------------------------------------------------------------------------
" SnipMate forked
" -----------------------------------------------------------------------------
" http://stackoverflow.com/questions/6916250/can-we-use-multiple-snippet-files-for-given-filetype-in-vim
" Available snippets: .vim/bundle/vim-snippets/snippets
" Usage: <intert mode> cl <tab> 
" Usage: https://github.com/honza/vim-snippets

" -----------------------------------------------------------------------------
" Fugitive plugin
" -----------------------------------------------------------------------------

" -----------------------------------------------------------------------------
" BuffExporer 
" -----------------------------------------------------------------------------

" -----------------------------------------------------------------------------
" Commentify
" -----------------------------------------------------------------------------
" ESC v (visualmode selection) c

" -----------------------------------------------------------------------------
" IdentLine
" -----------------------------------------------------------------------------
" Note: display thin vertical lines at each indentation level for code

" vertical line indentation for SPACES
let g:indentLine_color_term = 239
let g:indentLine_color_gui = '#09AA08'
let g:indentLine_char = 'â”‚'

" vertical line indentation for TAB
set list lcs=tab:\|\ 

" -----------------------------------------------------------------------------
" ControlP
" -----------------------------------------------------------------------------
" Use <leader>t to open ctrlp
let g:ctrlp_map = '<leader>p'
" Ignore these directories
set wildignore+=*/build/**
" disable caching
let g:ctrlp_use_caching=0

" -----------------------------------------------------------------------------
" Airline enablement
" -----------------------------------------------------------------------------
set laststatus=2

" -----------------------------------------------------------------------------
" Vim-Go: 
" Tutorial: https://github.com/fatih/vim-go-tutorial
" HowTo: http://www.ascent.io/blog/2014/03/11/gvm-with-golang/
" -----------------------------------------------------------------------------
" By default when :GoInstallBinaries is called, 
" the binaries are installed to $GOBIN or $GOPATH/bin. 
" To change it:

" let g:go_bin_path = expand("~/.gotools")
let g:go_bin_path = expand("~/bin")

" -----------------------------------------------------------------------------
" Misc
" -----------------------------------------------------------------------------
" cool colors
set t_Co=256


